[ {
  "id" : "2",
  "type" : "process",
  "data" : {
    "type" : "process",
    "lang" : "java",
    "code" : "\r\nimport com.vx6.master.MasterVerticle;\r\nimport io.vertx.core.Promise;\r\nimport io.vertx.core.eventbus.Message;\r\nimport io.vertx.core.logging.Logger;\r\nimport io.vertx.core.logging.LoggerFactory;\r\nimport io.vertx.core.json.JsonObject;\r\nimport io.vertx.core.shareddata.LocalMap;\r\nimport io.vertx.core.shareddata.SharedData;\r\nimport org.apache.commons.lang3.time.StopWatch;\r\n\r\nimport java.io.IOException;\r\nimport java.io.Reader;\r\n//import java.io.IOException;\r\n//import java.io.Reader;\r\nimport java.sql.Connection;\r\nimport java.sql.DriverManager;\r\n//import java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.sql.Statement;\r\n\r\nimport static org.apache.commons.lang3.StringUtils.isNotBlank;\r\n\r\n//import com.microsoft.sqlserver.jdbc.SQLServerStatement;\r\n\r\n\r\npublic class SampleVerticle3 extends MasterVerticle {\r\n    private final Logger LOGGER = LoggerFactory.getLogger(getClass());\r\n    private SharedData sharedData;\r\n    private LocalMap<String, String> accounts;\r\n    private LocalMap<String, String> customers;\r\n    private long accountCount = 0L;\r\n    private long customerCount = 0L;\r\n    private static final String EB_ADDRESS = \"/freeboard/sse/sapta/registery\";\r\n    private int retry = 500000;\r\n    @Override\r\n    public void start(Promise<Void> startPromise) throws Exception {\r\n        start();\r\n        startPromise.complete();\r\n        initialize();\r\n        //startFuture.complete();\r\n    }\r\n    \r\n    public void initialize() throws Exception {\r\n        LOGGER.info(\"initialize verticle {\" + this + \"}\");\r\n        sharedData = vertx.sharedData();\r\n        accounts = sharedData.getLocalMap(\"AYN_SAPTA_ACCOUNTS_3\");\r\n        customers = sharedData.getLocalMap(\"AYN_SAPTA_CUSTOMERS\");\r\n        accounts.clear();\r\n        customers.clear();\r\n        long timerID = vertx.setPeriodic(5000, id -> {\r\n            metrics();\r\n        });\r\n        String some_val = \"my_val\";\r\n        LOGGER.info(\"this is how you inject {} into your statement.\", some_val);\r\n    }\r\n\r\n    private boolean extracted(String accountInfo) {\r\n        accountCount++;\r\n        var split = accountInfo.split(\"\\\\|\");\r\n        //var accountNo = accountInfo.substring(0, 13);\r\n        if (split.length < 15) {\r\n            System.out.println(\"Defective: \" + accountInfo);\r\n            return true;\r\n        }\r\n        var accountNo = split[0];\r\n        accounts.put(accountNo, accountInfo);\r\n        var customerId = split[2];\r\n        if (isNotBlank(customerId)) {\r\n            var accountNos = customers.getOrDefault(customerId, \"\");\r\n            if (!accountNos.contains(accountNo)) {\r\n                accountNos += \"|\" + accountNo;\r\n                customers.put(customerId, accountNos);\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public <T> void noCmd(Message<T> tMessage, String cmd) {\r\n        String SQL = \"select \\n\" +\r\n                \"\\t--convert(varchar(9),UniqId) + '|' +   \\n\" +\r\n                \"\\tconvert(varchar(13),isnull(AccountNo,'null')) + '|' +\\n\" +\r\n                \"\\tconvert(varchar(10),isnull(Enable,'null')) + '|' +\\n\" +\r\n                \"\\tconvert(varchar(10),isnull(CustomerId,'null')) + '|' +\\n\" +\r\n                \"\\tconvert(varchar(100),isnull(TransGroupsStr,'null')) + '|' +\\n\" +\r\n                \"\\tconvert(varchar(110),isnull(Phones,'null')) + '|' +\\n\" +\r\n                \"\\tconvert(varchar(10),isnull(AutoRenewRegister,'null')) + '|' +\\n\" +\r\n                \"\\tconvert(varchar(60),isnull(RemainAmount,'null')) + '|' +\\n\" +\r\n                \"\\tconvert(varchar(50),isnull(RemainDays,'null')) + '|' +\\n\" +\r\n                \"\\tisnull(convert(varchar(10),DueDate, 102),'null') + '|' +\\n\" +\r\n                \"\\tconvert(varchar(10),isnull(LowLimitCredit,'null')) + '|' +\\n\" +\r\n                \"\\tconvert(varchar(10),isnull(LowLimitDebit,'null')) + '|' +\\n\" +\r\n                \"\\tisnull(convert(varchar(10),ExpireDate, 102) , 'null')+ '|' +\\n\" +\r\n                \"\\tisnull(convert(varchar(10),NearExpireNotifyDate, 102),'null')+ '|' +\\n\" +\r\n                \"\\tisnull(convert(varchar(10),ExpiredNotifyDate, 102) , 'null') + '|' +\\n\" +\r\n                \"\\t--convert(varchar(23),isnull(EditDT,'null')) + '|' +\\n\" +\r\n                \"\\tisnull(convert(varchar(10),AutoRenewRegCancelNotifyDate, 102) , 'null') +'\\\\n'\\n\" +\r\n                \"\\t--convert(varchar(10),isnull(Flag,'null'))\\n\" +\r\n                \"\\tfrom [TblAccounts6] for XML PATH('')\";\r\n        //SQL = \"select 'behnam'\";\r\n        // Create a variable for the connection string.\r\n        String connectionUrl = \"jdbc:sqlserver://192.168.166.11:1433;responseBuffering=adaptive;DatabaseName=BXX_SAPTA11;user=sa;password=suny$123\";\r\n\r\n        try (Connection con = DriverManager.getConnection(connectionUrl);\r\n             Statement stmt = con.createStatement();) {\r\n\r\n            // In adaptive mode, the application does not have to use a server cursor\r\n            // to avoid OutOfMemoryError when the SELECT statement produces very large\r\n            // results.\r\n\r\n            // Display the response buffering mode.\r\n           /* SQLServerStatement SQLstmt = (SQLServerStatement) stmt;\r\n            System.out.println(\"Response buffering mode is: \" + SQLstmt.getResponseBuffering());*/\r\n            //SQLstmt.close();\r\n            //System.out.println(\"SQL: \" + SQL);\r\n            // Get the updated data from the database and display it.\r\n            StopWatch watch = new StopWatch();\r\n            System.out.println(\"Loading DB started!\");\r\n            watch.start();\r\n            ResultSet rs = stmt.executeQuery(SQL);\r\n            StringBuilder remainder = new StringBuilder();\r\n            while (rs.next()) {\r\n                //extracted();\r\n                //System.out.println(\"rs.next()\");\r\n                Reader reader = rs.getCharacterStream(1);\r\n                if (reader != null) {\r\n                    char[] ac3 = new char[2048];\r\n                    while (reader.read(ac3) != -1) {\r\n                        //System.out.println(accounts.size());\r\n                        remainder.append(String.valueOf(ac3));\r\n                        //System.out.println(remainder.toString());\r\n                        String[] rows = remainder.toString().split(\"\\\\\\\\n\");\r\n                        int len = rows.length - 1;\r\n                        if (len > 0) {\r\n                            for (int i = 0; i < len; i++) {\r\n                                //System.out.println(\"Account: \" + rows[i]);\r\n\r\n                                // System.out.println(row.toString());\r\n                                // LOGGER.debug( row.toString());\r\n                                var accountInfo = rows[i];\r\n                                if (extracted(accountInfo)) continue;\r\n                            }\r\n                            //output = new char[2048];\r\n                        }\r\n                        remainder.setLength(0);\r\n                        remainder.append(rows[len].trim());\r\n                    }\r\n                    //System.out.println(rs.getString(1) + \" has been accessed for the summary column.\");\r\n                    // Close the stream.\r\n                    reader.close();\r\n                }\r\n            }\r\n            if (remainder.toString().trim().length() > 0) {\r\n                System.out.println(\"Remainder: \" + remainder.toString());\r\n                extracted(remainder.toString());\r\n            }\r\n            watch.stop();\r\n            long millis = watch.getTime();  // obtained from StopWatch\r\n            long minutes = (millis / 1000)  / 60;\r\n            int seconds = (int)((millis / 1000) % 60);\r\n            System.out.println(\"Time Elapsed: \" + minutes + \":\" + seconds); // Prints: Time Elapsed: 2501\r\n        } // Handle any errors that may have occurred.\r\n        catch (SQLException | IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void metrics() {\r\n        eb.publish(EB_ADDRESS,\r\n                new JsonObject()\r\n                        .put(\"accountCount\", accountCount)\r\n                        .put(\"customerCount\", customers.size())\r\n                        .put(\"accountSize\", accounts.size())\r\n                , addressBook.getDeliveryOptions().addHeader(\"event\", \"initialize\")\r\n                        .addHeader(\"retry\", this.retry + \"\"));\r\n    }\r\n}",
    "fName" : "SampleVerticle3",
    "theme" : "gruvbox",
    "outNumber" : 0,
    "config" : {
      "worker" : true,
      "instances" : 1
    },
    "setting" : {
      "Array" : [ 1, 2, 3 ],
      "Boolean" : true,
      "Null" : null,
      "Number" : 123,
      "Object" : {
        "a" : "b",
        "c" : "d"
      },
      "String" : "Hello World"
    }
  },
  "Trigger" : [ "switch.7.output" ],
  "Input" : [ ],
  "Error" : [ ],
  "Result" : [ ]
}, {
  "id" : "7",
  "type" : "switch",
  "data" : {
    "type" : "switch",
    "config" : {
      "kind" : "trigger",
      "switchName" : "RedGreenToggleSwitch"
    },
    "setting" : {
      "_" : {
        "state" : true,
        "period" : 0,
        "delay" : 0
      }
    }
  },
  "Output" : [ "process.2.trigger" ]
} ]